-- 1st Problem

SELECT
    CASE
        WHEN A + B <= C
        OR A + C <= B
        OR B + C <= A THEN 'Not A Triangle'
        WHEN A = B
        AND B = C THEN 'Equilateral'
        WHEN A = B
        OR B = C
        OR A = C THEN 'Isosceles'
        ELSE 'Scalene'
    END
FROM TRIANGLES;

-- 2nd Problem

SELECT CONCAT(
        NAME, '(', SUBSTR(OCCUPATION, 1, 1), ')'
    )
FROM OCCUPATIONS
ORDER BY NAME;

SELECT CONCAT(
        'There are a total of ', COUNT(*), ' ', LOWER(OCCUPATION), 's.'
    )
FROM OCCUPATIONS
GROUP BY
    OCCUPATION
ORDER BY COUNT(*), OCCUPATION;

-- 3nd Problem

SELECT COMPANY.COMPANY_CODE, COMPANY.FOUNDER, COUNT(
        DISTINCT LEAD_MANAGER.LEAD_MANAGER_CODE
    ), COUNT(
        DISTINCT SENIOR_MANAGER.SENIOR_MANAGER_CODE
    ), COUNT(DISTINCT MANAGER.MANAGER_CODE), COUNT(
        DISTINCT EMPLOYEE.EMPLOYEE_CODE
    )
FROM
    COMPANY
    LEFT JOIN LEAD_MANAGER ON COMPANY.COMPANY_CODE = lEAD_MANAGER.COMPANY_CODE
    LEFT JOIN SENIOR_MANAGER ON COMPANY.COMPANY_CODE = SENIOR_MANAGER.COMPANY_CODE
    LEFT JOIN MANAGER ON COMPANY.COMPANY_CODE = MANAGER.COMPANY_CODE
    LEFT JOIN EMPLOYEE ON COMPANY.COMPANY_CODE = EMPLOYEE.COMPANY_CODE
GROUP BY
    COMPANY.COMPANY_CODE,
    COMPANY.FOUNDER
ORDER BY COMPANY.COMPANY_CODE ASC;

-- 5th Problem

SELECT ROUND(AVG(POPULATION), 0) FROM CITY;

--6th Problem

SELECT W1.ID, WP1.AGE, W1.COINS_NEEDED, W1.POWER
FROM WANDS W1
    JOIN WANDS_PROPERTY WP1 ON W1.CODE = WP1.CODE
WHERE
    WP1.IS_EVIL = 0
    AND W1.COINS_NEEDED = (
        SELECT MIN(W2.COINS_NEEDED)
        FROM WANDS W2
            JOIN WANDS_PROPERTY WP2 ON W2.CODE = WP2.CODE
        WHERE
            W2.POWER = W1.POWER
            AND WP2.AGE = WP1.AGE
            AND WP2.IS_EVIL = 0
    )
ORDER BY W1.POWER DESC, WP1.AGE DESC;

-- 8th Problem

SELECT F1.X, F1.Y
FROM
    FUNCTIONS F1
    JOIN FUNCTIONS F2 ON F1.X = F2.Y
    AND F2.X = F1.Y
    AND (
        F1.X != F1.Y
        OR (
            SELECT COUNT(*)
            FROM FUNCTIONS F3
            WHERE
                F3.X = F1.X
                AND F3.Y = F1.Y
        ) > 1
    )
WHERE
    F1.X <= F1.Y
GROUP BY
    F1.X,
    F1.Y
ORDER BY F1.X ASC;

-- 9th Problem

SELECT ROUND(LONG_W, 4)
FROM STATION
WHERE
    LAT_N = (
        SELECT MAX(LAT_N)
        FROM STATION
        WHERE
            LAT_N < 137.2345
    );

-- 10th Problem

SELECT S.NAME
FROM
    STUDENTS S
    JOIN FRIENDS F ON S.ID = F.ID
    JOIN PACKAGES P1 ON S.ID = P1.ID
    JOIN PACKAGES P2 ON F.FRIEND_ID = P2.ID
WHERE
    P2.SALARY > P1.SALARY
ORDER BY P2.SALARY ASC;